<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Posts on Acme of foolishness</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Acme of foolishness</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Damilola</copyright>
    <lastBuildDate>Wed, 02 Jul 2025 19:13:52 +0100</lastBuildDate><atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" /><icon>http://localhost:1313/logo.svg</icon>
    
    
    <item>
      <title>Deploying a Jenkins Server to a Kubernetes Cluster</title>
      <link>http://localhost:1313/posts/kubernetes/deploying-a-jenkins-server-to-a-kubernetes-cluster/</link>
      <pubDate>Wed, 02 Jul 2025 19:13:52 +0100</pubDate>
      
      <guid>http://localhost:1313/posts/kubernetes/deploying-a-jenkins-server-to-a-kubernetes-cluster/</guid>
      <description><![CDATA[<h1 id="-project-2-deploying-jenkins-on-kubernetes-with-persistent-storage-minikube">üöÄ Project 2: Deploying Jenkins on Kubernetes with Persistent Storage (Minikube)</h1>
<blockquote>
<p><em>Part of the <strong>10 Kubernetes Projects in 10 Weeks</strong> challenge</em></p></blockquote>
<p>Welcome to the second project in my Kubernetes challenge! This time, we&rsquo;re deploying <strong>Jenkins</strong>‚Äîa powerful CI/CD automation server‚Äîon a <strong>Minikube Kubernetes cluster</strong>, and we‚Äôll focus on one crucial aspect: <strong>persistent storage</strong>.</p>
<p>Stateful apps like Jenkins need to store data across pod restarts‚Äîlike pipeline configurations, plugins, and credentials. We&rsquo;ll achieve that using <strong>Persistent Volumes (PV)</strong> and <strong>Persistent Volume Claims (PVC)</strong> in Kubernetes.</p>
<p>Let‚Äôs dive in! üèä‚Äç‚ôÇÔ∏è</p>
<hr>
<h2 id="-what-youll-learn">üß† What You&rsquo;ll Learn</h2>
<ul>
<li>How to deploy Jenkins in a Kubernetes cluster using Minikube</li>
<li>How to configure Persistent Volumes and Persistent Volume Claims</li>
<li>Why persistence is essential for stateful applications like Jenkins</li>
</ul>
<hr>
<h2 id="-prerequisites">üì¶ Prerequisites</h2>
<p>Before you start, make sure you have the following installed:</p>
<ul>
<li>‚úÖ <a href="https://minikube.sigs.k8s.io/docs/start/">Minikube</a></li>
<li>‚úÖ <a href="https://kubernetes.io/docs/tasks/tools/">kubectl</a></li>
<li>‚úÖ <a href="https://helm.sh/docs/intro/install/">Helm</a> (optional, but makes things easier)</li>
<li>‚úÖ Basic familiarity with Kubernetes concepts (Pods, Services, PVCs)</li>
</ul>
<hr>
<h2 id="-step-1-start-your-minikube-cluster">‚öôÔ∏è Step 1: Start Your Minikube Cluster</h2>
<p>Let&rsquo;s spin up a local Kubernetes cluster using Minikube.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>minikube start --driver<span style="color:#f92672">=</span>docker
</span></span></code></pre></div>]]></description>
      
    </item>
    
    
    
    <item>
      <title>Deploying a Static Website to a Kubernetes Cluster</title>
      <link>http://localhost:1313/posts/kubernetes/deploying-a-static-website-to-a-kubernetes-cluster/</link>
      <pubDate>Wed, 25 Jun 2025 21:05:38 +0100</pubDate>
      
      <guid>http://localhost:1313/posts/kubernetes/deploying-a-static-website-to-a-kubernetes-cluster/</guid>
      <description><![CDATA[<p>As part of my commitment to building mastery in kubernetes, I&rsquo;m starting with something simple but foundational: deploying a static website on Kubernetes.</p>
<p>It&rsquo;s quite an overkill and there is almost no practical reason for hosting a static site in kubernetes, but the goal here is to get hands on experience with Kubernetes components specifically pods, deployments and services, which I consider to be the building blocks of any Kubernetes application.</p>
<h2 id="what-well-be-building">What We&rsquo;ll be Building</h2>
<p>We&rsquo;ll deploy a static site served by <a href="">caddy</a> on a local kubernetes cluster using <a href="">minikube</a>, at the end of this project, we should be able to tell:</p>
<ul>
<li>What a Pod is and how containers are run</li>
<li>How a Deployment can be used to manage Pods- How to expose our application to the external world with Services</li>
</ul>
<h2 id="prerequisites">Prerequisites</h2>
<ul>
<li><a href="">Docker</a> or <a href="">Docker Desktop</a></li>
<li><a href="">minikube</a></li>
<li><a href="">kubectl</a></li>
<li><a href="">git</a></li>
<li>docker hub account</li>
</ul>
<p>The code for this project can be found in this <a href="">repo</a></p>
<h2 id="prepare-the-static-website">Prepare the Static Website</h2>
<p>We are going to be using a custom website for this project, any static website would do but this one here is a free open source example site that we will use for this project.</p>
<p>We have to build a docker image that bundles our site and server in one package and upload it to a container registry so our cluster can then pull from there.</p>
<p>We pull the example site from the repo or you can use a simple <code>index.html</code> file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone https://github.com/cloudacademy/static-website-example.git
</span></span></code></pre></div><p>Since we will be using caddy server, we need to create a configuration to tell the server how to serve our files.</p>
<p>We create a new file called <code>Caddyfile</code> with the following content</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Caddyfile" data-lang="Caddyfile"><span style="display:flex;"><span>:80
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">root</span> <span style="color:#a6e22e">*</span> <span style="color:#e6db74">/srv</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">file_server</span>
</span></span></code></pre></div><p>This tells the server to act as a file server, listening on port 80 and serving files in the /srv directory.</p>
<p>Then we create a <code>Dockerfile</code> which contains commands that will help build our image.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> caddy:2.7.5-alpine</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /srv</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> static-website-example /srv<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> Caddyfile /etc/caddy/Caddyfile<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">EXPOSE</span><span style="color:#e6db74"> 80</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> [<span style="color:#e6db74">&#34;sh&#34;</span>, <span style="color:#e6db74">&#34;-c&#34;</span>, <span style="color:#e6db74">&#34;caddy run --config /etc/caddy/Caddyfile --adapter caddyfile&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>We then build our image and push to dockerhub.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker build -t k8s-static-website-example .
</span></span></code></pre></div><p>Before pushing to dockerhub we may need to authenticate</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker login
</span></span></code></pre></div><p>Follow the prompts to login and on successful login, push the newly built image to dockerhub</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker push &lt;username&gt;/k8s-static-website-example
</span></span></code></pre></div><p>With these out of the way, we can focus on kubernetes next.</p>
<h2 id="pods">Pods</h2>
<p>In kubernetes, pods are the smallest deployable units of compute. An application in a container runs in a pod. A pod can contain more than one container but it is usually recommended to run one container per pod.</p>
<p>Containers running in a pod share the same IP address and network namespace. To learn more about pods, please refer to the official guide and docs.</p>
<p>To define a pod, you can use the following yaml file</p>
<h2 id="deployments">Deployments</h2>
<h2 id="services">Services</h2>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Understanding Kubernetes and Cloud Native Architecture</title>
      <link>http://localhost:1313/posts/kubernetes/understanding-kubernetes-and-cloud-native-architecture/</link>
      <pubDate>Tue, 24 Jun 2025 17:00:04 +0100</pubDate>
      
      <guid>http://localhost:1313/posts/kubernetes/understanding-kubernetes-and-cloud-native-architecture/</guid>
      <description><![CDATA[<p>Like many backend engineers, I have spent most of my time doing CRUD, writing APIs, database queries, engaging in pointless arguments about programming languages and so on. But I began to notice that most job descriptions for senior roles expected more than just programming and database skills.</p>
<p>Since the rise of cloud computing, understanding infrastructure management, DevOps skills and cloud-native experience are now becoming essential for a backend engineer.</p>
<p>This realization led me to take a meaningful step forward in my professional journey, learning <a href="https://kubernetes.io">Kubernetes</a>. I came across a <a href="https://cncf.io">CNCF</a> and <a href="https://andela.com">Andela</a> <a href="https://www.andela.com/blog-posts/andela-and-cncf-team-up-to-give-the-11-8b-kubernetes-market-30-000-new-players">partnership</a> offering to train developers in kubernetes which I did not let pass me by.
I got accepted into the first cohort of the program, took the <a href="https://training.linuxfoundation.org/training/kubernetes-and-cloud-native-essentials-lfs250/">LFS250 course</a> and within four weeks obtained my <a href="https://training.linuxfoundation.org/certification/kubernetes-cloud-native-associate/">KCNA</a> certification as a kubernetes noob.</p>
<p>This post is a reflection of what I learned, why it matters, and where I&rsquo;m headed next.</p>
<h2 id="what-even-is-cloud-native">What Even Is Cloud Native</h2>
<p>Before diving into kubernetes, I want to talk about cloud-native architecture. Cloud-native is more than just running applications in the cloud, but it is a set of technological and architectural principles and practices geared towards cost-efficiency, reliability and faster time-to-market.</p>
<p>Some of the core principles or philosophy of the cloud native architecture include:</p>
<ul>
<li>Containers as a unit of deployment.</li>
<li>Loosely coupled systems with microservices as the default design pattern.</li>
<li>Employing automation and CI/CD pipelines for fast, repeatable and reliable delivery of applications.</li>
<li>Dynamic orchestration of infrastructure using tools like kubernetes.</li>
</ul>
<p>The cloud native ecosystem is vast with all kinds of tools for monitoring, networking, storage and so on, but kubernetes is at the center of it all. You can read more on cloud native <a href="https://github.com/cncf/toc/blob/main/DEFINITION.md">here</a>.</p>
<h2 id="what-is-kubernetes">What Is Kubernetes</h2>
<p>Going by current trends, Kubernetes can be considered as the platform for deploying and managing modern applications.
Kubernetes is a <a href="">container orchestration</a> platform that automates the deployment, scaling, networking and self-healing of containerized applications.</p>
<p>In practice, Kubernetes takes your containerized workloads and ensures they&rsquo;re always running in the desired state, no matter what. If an application crashes, Kubernetes restarts it. If traffic spikes, it can add replicas to manage load. If a node dies, it reschedules your workloads to healthy nodes.</p>
<p>Containers are a very convenient and lightweight way to run applications for a lot of good reasons.</p>
<p>Before containers you had to run applications on virtual machines or physical servers, running more than one application on the same server would require that these two do not clash or interfere with each other in terms of resource usage for both software and hardware.</p>
<p>Consider a case where two different applications both need different versions of a system library, or one application consumes much of the available resources and cuases all other process to crashes, this is not ideal and we have to ensure that each application is isolated from the other.</p>
<p>Virtual machines allow you to isolate operating systems on the same hardware, so applications running in virtual machines are isolated and resource limits and constraints can be well defined.</p>
<p>The success of virtualization technology was the ability to run multiple operating systems while using same hardware, but the down side is it the operating system overhead makes it somewhat inefficient.</p>
<p>During restarts, you have to add boot times into consideration, the storage space used to install full operating systems on disk and as different applications have different resource requirements, it would be wasteful to run a static website in a virtual machine, compared to an e-commerce website.</p>
<p>Containers are like virtual machines in the sense they isolate processes, but unlike virtual machines, containers share the same underlying host operating system kernel. This makes them very lightweight and cheap to run.</p>
<p>Many organizations nowadays have multiple services, or multiple instances of the same service to spread load across these instances. Managing tens of containers manually is easy, but managing containers at scale gets very messy easily and we will see why.
When you deploy a containerized application, you need to setup networking, manage restarts when it crashes, update to new versions and scale your instances when demands are high.</p>
<p>Container orchestration is a solution to this problem at scale and kubernetes is a container orchestration system. It can help manage automatic deployments, scaling, fault tolerance and management of containerized applications.</p>
<h2 id="kubernetes-architecture">Kubernetes Architecture</h2>
<p>Kubernetes operates in a cluster which usually spans across multiple hosts or nodes. The cluster can be divided into two parts, the control plane  and the worker plane.
The control plane is the brain of the cluster, it manages container scheduling/placement to worker nodes, self-healing, deployments etc. The worker nodes run the containerized workloads.</p>
<p>Some of the major concepts in kubernetes are as follows:</p>
<ul>
<li>
<p>Pods: the smallest deployable units, often one container, sometimes more.</p>
</li>
<li>
<p>Deployments: manage the lifecycle of pods.</p>
</li>
<li>
<p>Services: expose your pods internally or externally.</p>
</li>
<li>
<p>Nodes &amp; Clusters: infrastructure components that run and manage workloads.</p>
</li>
<li>
<p>Control Plane vs Worker Nodes: the brain and the muscle of the cluster.</p>
</li>
</ul>
<p>Kubernetes is an absolute beast and is one of the most complex tools to learn in software engineering. One blog post cannot be enough to capture the depth of kubernetes. So I am going to start simple by building 10 simple projects that highlights the different parts of kubernetes.</p>
<p>I started this journey to grow beyond my backend bubble‚Äîand I&rsquo;m glad I did. Kubernetes and the cloud-native ecosystem opened up a whole new layer of infrastructure understanding that complements my developer skills.</p>
<p>If you&rsquo;re a backend engineer thinking about DevOps, cloud-native, or just trying to stay ahead in your career, I highly recommend learning Kubernetes.</p>
]]></description>
      
        <media:thumbnail url="http://localhost:1313/images/kubernetes-101-banner2.png" />
      
    </item>
    
    
    
    <item>
      <title>Automating Deployments with Terraform and Ansible</title>
      <link>http://localhost:1313/posts/deploy-destroy-repeat/</link>
      <pubDate>Tue, 03 Dec 2024 15:38:25 +0100</pubDate>
      
      <guid>http://localhost:1313/posts/deploy-destroy-repeat/</guid>
      <description><![CDATA[<p>It is week 2 of my devops project challenges and the challenge of the week was to automate the deployment and configuration of the <a href="/posts/compose-your-apps">previous</a> week&rsquo;s challenge. It feels like the next step in the DevOps process, you have been able to package your applications, but you still need to setup infrastructure and many times repeatedly, doing this manually is not only tedious and time consuming but can lead to inconsistencies in the running environments for your applications, more importantly, it doesn&rsquo;t scale.</p>
<p>In this week&rsquo;s challenge we would be using the popular <a href="https://aws.amazon.com/what-is/iac/">IaC</a> tool <a href="https://www.terraform.io/">Terraform</a> in conjunction with the popular automation and configuration management tool <a href="https://www.ansible.com/">Ansible</a> to create a automated deployment process for our applictions. The goal is to be able to provision, configure and run all the necessary infrastructure required and then also pull them down when necessary, all with one command.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>terraform apply -auto-approve
</span></span></code></pre></div><p>To achieve this, we are going to need to be familiar with a couple of tools which should be installed on our machine.</p>
<ul>
<li>Terraform: To automate infrastructure provisioning</li>
<li>Ansible: To automate the configuration of our infrastructure and manage our application</li>
<li>AWS CLI: Used for AWS get specific information on the state of our infrastructure</li>
<li>Bash scripting: To write custom logic during automation</li>
</ul>
<h2 id="application-overview">Application Overview</h2>
<p>To provide a recap of <a href="/posts/compose-your-apps">week one</a> challenge, we packaged our apps into docker containers, consisting of a frontend appliaction, backend application, a database and host of monitoring services, then put all these services behind a reverse proxy to route traffic to the appropriate target, so all our HTTP services are only exposed through the reverse proxy. This diagram shows the architecture of our app</p>
<p><img src="images/architecture.png" alt="architecure diagram"></p>
<p>The repo for this week&rsquo;s challenge can be found <a href="https://github.com/The-DevOps-Dojo/cv-challenge-o2">here</a>.</p>
<h2 id="terraform">Terraform</h2>
<p><a href="https://www.terraform.io/">Terraform</a> is an open-source Infrastructure as Code (IaC) tool that allows you to define, provision, and manage infrastructure resources across various cloud providers and on-premises environments using a high-level configuration language called HCL.
We would be using Terraform to create our EC2 instance and to trigger Ansible to begin configuring our provisioned instance.</p>
<p>But before that, we would need to build, tag and push the docker images for our frontend and backend application to a container registry so we can pull these easily. Fork the <a href="https://github.com/The-DevOps-Dojo/cv-challenge-o2">repo</a> and clone to your local machine, copy over the files from the previous week&rsquo;s challenge to our new repo run the following commands to build and push.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker login <span style="color:#75715e"># do this if you have not logged in</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>docker build -f Dockerfile.frontend .
</span></span><span style="display:flex;"><span>docker build -f Dockerfile.backend .
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>docker images <span style="color:#75715e"># note the image id for your frontend and backend images</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>docker tag &lt;IMAGE_ID&gt; &lt;DOCKERHUB_USERNAME&gt;/frontend:latest <span style="color:#75715e"># replace &lt;IMAGE_ID&gt; and &lt;DOCKERHUB_USERNAME&gt;</span>
</span></span><span style="display:flex;"><span>docker tag &lt;IMAGE_ID&gt; &lt;DOCKERHUB_USERNAME&gt;/backend:latest <span style="color:#75715e"># replace &lt;IMAGE_ID&gt; and &lt;DOCKERHUB_USERNAME&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>docker push &lt;DOCKERHUB_USERNAME&gt;/frontend:latest
</span></span><span style="display:flex;"><span>docker push &lt;DOCKERHUB_USERNAME&gt;/backend:latest
</span></span></code></pre></div><p>Now that we have pushed our image to dockerhub, we have to modify our <code>docker-compose.app.yml</code> to pull these images instead.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">frontend</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">&lt;DOCKERHUB_USERNAME&gt;/frontend:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">app_network</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">backend</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">&lt;DOCKERHUB_USERNAME&gt;/backend:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">app_network</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># ...</span>
</span></span></code></pre></div><p>This way, we only rely on the already built docker images, somewhat seperating our build and deploy stages. With these out of the way, we can start terraforming the chaos of infrastructure deployment.</p>
<p>We would proceed by writing HCL config files to define our infrastructure. Create a main.tf file and variables.tf file. Our main.tf file houses our infrastructue definitions and variables.tf contains our variables. We want to provision an EC2 instance with docker and docker-compose installed.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-hcl" data-lang="hcl"><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;aws_instance&#34; &#34;web_server&#34;</span> {
</span></span><span style="display:flex;"><span>  ami                         <span style="color:#f92672">=</span> <span style="color:#66d9ef">var</span>.<span style="color:#66d9ef">ami</span>
</span></span><span style="display:flex;"><span>  instance_type               <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;t2.micro&#34;</span>
</span></span><span style="display:flex;"><span>  key_name                    <span style="color:#f92672">=</span> <span style="color:#66d9ef">var</span>.<span style="color:#66d9ef">key_name</span>
</span></span><span style="display:flex;"><span>  vpc_security_group_ids      <span style="color:#f92672">=</span> <span style="color:#66d9ef">var</span>.<span style="color:#66d9ef">security_group_ids</span>
</span></span><span style="display:flex;"><span>  associate_public_ip_address <span style="color:#f92672">=</span> var.eip <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span>
</span></span><span style="display:flex;"><span>  user_data                   <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">&lt;&lt;-</span><span style="color:#66d9ef">EOF</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    #!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">curl</span> <span style="color:#960050;background-color:#1e0010">-</span><span style="color:#66d9ef">fsSL</span> <span style="color:#66d9ef">https</span><span style="color:#960050;background-color:#1e0010">://</span><span style="color:#66d9ef">get</span>.<span style="color:#66d9ef">docker</span>.<span style="color:#66d9ef">com</span> <span style="color:#960050;background-color:#1e0010">-</span><span style="color:#66d9ef">o</span> <span style="color:#66d9ef">get</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#66d9ef">docker</span>.<span style="color:#66d9ef">sh</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">sudo</span> <span style="color:#66d9ef">sh</span> <span style="color:#66d9ef">get</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#66d9ef">docker</span>.<span style="color:#66d9ef">sh</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">sudo</span> <span style="color:#66d9ef">usermod</span> <span style="color:#960050;background-color:#1e0010">-</span><span style="color:#66d9ef">aG</span> <span style="color:#66d9ef">docker</span> <span style="color:#66d9ef">ubuntu</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">newgrp</span> <span style="color:#66d9ef">docker</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">curl</span> <span style="color:#960050;background-color:#1e0010">-</span><span style="color:#66d9ef">SL</span> <span style="color:#66d9ef">https</span><span style="color:#960050;background-color:#1e0010">://</span><span style="color:#66d9ef">github</span>.<span style="color:#66d9ef">com</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#66d9ef">docker</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#66d9ef">compose</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#66d9ef">releases</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#66d9ef">download</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#66d9ef">v2</span>.<span style="color:#ae81ff">30</span>.<span style="color:#ae81ff">3</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#66d9ef">docker</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#66d9ef">compose</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#66d9ef">linux</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#66d9ef">x86_64</span> <span style="color:#960050;background-color:#1e0010">-</span><span style="color:#66d9ef">o</span> <span style="color:#66d9ef">docker</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#66d9ef">compose</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">sudo</span> <span style="color:#66d9ef">chmod</span> <span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">x</span> <span style="color:#66d9ef">docker</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#66d9ef">compose</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">sudo</span> <span style="color:#66d9ef">mv</span> <span style="color:#66d9ef">docker</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#66d9ef">compose</span> <span style="color:#960050;background-color:#1e0010">/</span><span style="color:#66d9ef">usr</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#66d9ef">local</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#66d9ef">bin</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#66d9ef">docker</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#66d9ef">compose</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">EOF</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  tags <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    Name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;web_server&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;aws_eip_association&#34; &#34;eip_assoc&#34;</span> {
</span></span><span style="display:flex;"><span>  count               <span style="color:#f92672">=</span> var.eip <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span> <span style="color:#960050;background-color:#1e0010">?</span> <span style="color:#ae81ff">0</span> <span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  instance_id         <span style="color:#f92672">=</span> <span style="color:#66d9ef">aws_instance</span>.<span style="color:#66d9ef">web_server</span>.<span style="color:#66d9ef">id</span>
</span></span><span style="display:flex;"><span>  allow_reassociation <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  allocation_id       <span style="color:#f92672">=</span> <span style="color:#66d9ef">var</span>.<span style="color:#66d9ef">eip</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>in variables.tf</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-hcl" data-lang="hcl"><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;security_group_ids&#34;</span> {
</span></span><span style="display:flex;"><span>  description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;The AWS security group to apply.&#34;</span>
</span></span><span style="display:flex;"><span>  type        <span style="color:#f92672">=</span> <span style="color:#66d9ef">list</span>(<span style="color:#66d9ef">string</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;ami&#34;</span> {
</span></span><span style="display:flex;"><span>  description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;The AMI ID to use for the instance.&#34;</span>
</span></span><span style="display:flex;"><span>  type        <span style="color:#f92672">=</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>  default     <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ami-0866a3c8686eaeeba&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;key_name&#34;</span> {
</span></span><span style="display:flex;"><span>  description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Key pair&#34;</span>
</span></span><span style="display:flex;"><span>  type        <span style="color:#f92672">=</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;eip&#34;</span> {
</span></span><span style="display:flex;"><span>  description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Optional Elastic IP address to associate with instance if present&#34;</span>
</span></span><span style="display:flex;"><span>  type        <span style="color:#f92672">=</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>  default     <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;domain_name&#34;</span> {
</span></span><span style="display:flex;"><span>  description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;The domain name to use for the application.&#34;</span>
</span></span><span style="display:flex;"><span>  type        <span style="color:#f92672">=</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We would use environment variables to set the values for these variables and to do that, values for these variables can be gotten from your AWS console e.g the AMI ID, key pair etc. Terraform requires the <code>TF_VAR_</code> prefix for each defined variable, we also need to set our AWS IAM credentials to use the AWS plugin for terraform. You could put all these variables in a <code>.env</code> file and source it in your current terminal session to make these variables reflect.</p>
<pre tabindex="0"><code>export AWS_ACCESS_KEY_ID=&#34;anaccesskey&#34;
export AWS_SECRET_ACCESS_KEY=&#34;asecretkey&#34;
export AWS_REGION=&#34;us-west-2&#34;
export TF_VAR_ami=&#34;ami-eba&#34;
export TF_VAR_security_group_ids=&#39;[&#34;sg-eba&#34;]&#39;
export TF_VAR_domain_name=&#34;mydomain.com&#34;
export TF_VAR_eip=&#34;eipalloc-xxxxx&#34; # optional to use elastic ip
</code></pre><p>The next step is to tell terraform to initialize our project by running the command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>terraform init
</span></span></code></pre></div><p>This command fetches all our plugins listed in the main.tf file. We can then run the plan command to understand how terraform is going to provision these resources</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>terraform plan
</span></span></code></pre></div><p>We will see a plan on what terraform will create and how it plans to do so. Now we can run our apply command to provision the resources.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>terraform apply
</span></span></code></pre></div><p>It would display a prompt asking if you want to proceed, type yes and watch magic happen. In few minutes, you should have your EC2 instance running, and you can SSH into it to confirm it is accessible. We shall the proceed to configuring our server to run our apps with ansible.</p>
<h2 id="ansible">Ansible</h2>
<p>We would use ansible to pull our docker images to our host platform which already has docker installed, copy over the necessary config files for our monitoring services and reverse proxy, generate free SSL certificates to enable HTTPS and start our containers.</p>
<p>First, we need to generate an inventory file to tell ansible about our remote hosts, i.e the EC2 instance, we need the IP address of this instance and we can get that by modifying our terraform config file to include this step after provisioning the instance.</p>
<p>In the main.tf file, add the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-hcl" data-lang="hcl"><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;local_file&#34; &#34;ansible_inventory&#34;</span> {
</span></span><span style="display:flex;"><span>  content  <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">&lt;&lt;-</span><span style="color:#66d9ef">EOF</span>
</span></span><span style="display:flex;"><span>    [<span style="color:#66d9ef">web_servers</span>]
</span></span><span style="display:flex;"><span>    ${var.eip !<span style="color:#f92672">=</span> null ? aws_eip_association.eip_assoc.public_ip : aws_instance.web_server.public_ip} ansible_user<span style="color:#f92672">=</span>ubuntu ansible_ssh_private_key_file<span style="color:#f92672">=</span><span style="color:#66d9ef">devops_challenge</span>.<span style="color:#66d9ef">pem</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">EOF</span>
</span></span><span style="display:flex;"><span>  filename <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;${path.module}/inventory.ini&#34;</span>
</span></span><span style="display:flex;"><span>  file_permission <span style="color:#f92672">=</span> <span style="color:#ae81ff">0644</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This would create local file on our host machine named <code>inventory.ini</code> which would contain the IP address of our newly created EC2 instance.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#66d9ef">[web_servers]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">34.116.202.250 ansible_user</span><span style="color:#f92672">=</span><span style="color:#e6db74">ubuntu ansible_ssh_private_key_file=key_pair.pem</span>
</span></span></code></pre></div><p>Make sure you have the key pair used to launch the EC2 instance saved as this would be needed when ansible wants to connect to your servers.</p>
<p>Run the <code>terraform init</code> command again to fetch the <code>local</code> provider for the <code>local_file</code> resource and run the <code>terraform plan &amp;&amp; terraform apply</code> commands to see your new inventory file. This tells ansible what hosts are available to be configured.</p>
<p>Ansible uses playbooks which are just <code>yaml</code> files to define plays which contains tasks to be run on each hosts, we would define a playbook to configure our instances but first we need to ensure our instances are up and available before ansible can begin, this is where the <code>aws</code> CLI tool will be used to query for our instance state and wait till it is ready. Modify the <code>local_file</code> resource like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-hcl" data-lang="hcl"><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;local_file&#34; &#34;ansible_inventory&#34;</span> {
</span></span><span style="display:flex;"><span>  content  <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">&lt;&lt;-</span><span style="color:#66d9ef">EOF</span>
</span></span><span style="display:flex;"><span>    [<span style="color:#66d9ef">web_servers</span>]
</span></span><span style="display:flex;"><span>    ${var.eip !<span style="color:#f92672">=</span> null ? aws_eip_association.eip_assoc.public_ip : aws_instance.web_server.public_ip} ansible_user<span style="color:#f92672">=</span>ubuntu ansible_ssh_private_key_file<span style="color:#f92672">=</span><span style="color:#66d9ef">devops_challenge</span>.<span style="color:#66d9ef">pem</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">EOF</span>
</span></span><span style="display:flex;"><span>  filename <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;${path.module}/inventory.ini&#34;</span>
</span></span><span style="display:flex;"><span>  file_permission <span style="color:#f92672">=</span> <span style="color:#ae81ff">0644</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">provisioner</span> <span style="color:#e6db74">&#34;local-exec&#34;</span> {
</span></span><span style="display:flex;"><span>    command <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">&lt;&lt;-</span><span style="color:#66d9ef">EOF</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">aws</span> <span style="color:#66d9ef">ec2</span> <span style="color:#66d9ef">wait</span> <span style="color:#66d9ef">instance</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#66d9ef">status</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#66d9ef">ok</span> <span style="color:#960050;background-color:#1e0010">--</span><span style="color:#66d9ef">instance</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#66d9ef">ids</span> <span style="color:#e6db74">${</span><span style="color:#960050;background-color:#1e0010">aws_instance</span>.<span style="color:#960050;background-color:#1e0010">web_server</span>.<span style="color:#960050;background-color:#1e0010">id</span><span style="color:#e6db74">}</span>
</span></span><span style="display:flex;"><span>      ansible-playbook -i inventory.ini -e &#34;APP_SERVER_NAME<span style="color:#f92672">=</span><span style="color:#e6db74">${</span><span style="color:#960050;background-color:#1e0010">var</span>.<span style="color:#960050;background-color:#1e0010">domain_name</span><span style="color:#e6db74">}</span><span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#66d9ef">ansible</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#66d9ef">deploy</span>.<span style="color:#66d9ef">yml</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">EOF</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Create a new folder to house all our ansible related files and create a playbook called <code>deploy.yml</code>. We would be using ansible <a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_reuse_roles.html">roles</a> to organize our ansible configuration and it requires a certain folder structure.</p>
<p>Create the following files</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir -p ansible/roles/web_servers/tasks
</span></span><span style="display:flex;"><span>mkdir ansible/roles/web_servers/files
</span></span><span style="display:flex;"><span>touch ansible/deploy.yml
</span></span><span style="display:flex;"><span>touch ansible/roles/web_servers/tasks/main.yml
</span></span></code></pre></div><p>We just created a <code>deploy</code> playbook and <code>web_server</code> roles, roles can contain a <code>tasks/</code> folder which defines the tasks the role would perform tasks in the <code>tasks/main.yml</code> play. The <code>files/</code> folder contains files needed for our roles to run, files like the docker-compose files, config files for prometheus, grafana etc and nginx configuration would need to be copied over to the remote host. We can mv those files over to the <code>files/</code> directory.</p>
<p>We begin with the <code>deploy</code> playbook which contains only one play:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>- <span style="color:#f92672">hosts</span>: <span style="color:#ae81ff">web_servers</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">become</span>: <span style="color:#66d9ef">yes</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">roles</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">web_servers</span>
</span></span></code></pre></div><p>The play targets the <code>web_servers</code> hosts that was defined in our inventory file and uses the <code>web_servers</code> role to run tasks on this target. The <code>roles/web_servers/tasks/main.yml</code> would then contain all our tasks for this play.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Ensure parent directory exist</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">file</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">path</span>: <span style="color:#e6db74">&#34;/home/ubuntu/app&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">state</span>: <span style="color:#ae81ff">directory</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">mode</span>: <span style="color:#e6db74">&#34;0755&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Copy files</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">copy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">src</span>: <span style="color:#e6db74">&#34;{{ item.src }}&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">dest</span>: <span style="color:#e6db74">&#34;/home/ubuntu/app/{{ item.dest }}&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">loop</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">src</span>: <span style="color:#e6db74">&#34;docker-compose.app.yml&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dest</span>: <span style="color:#e6db74">&#34;docker-compose.app.yml&#34;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">src</span>: <span style="color:#e6db74">&#34;docker-compose.monitoring.yml&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dest</span>: <span style="color:#e6db74">&#34;docker-compose.monitoring.yml&#34;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">src</span>: <span style="color:#e6db74">&#34;prometheus.yml&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dest</span>: <span style="color:#e6db74">&#34;prometheus.yml&#34;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">src</span>: <span style="color:#e6db74">&#34;loki-config.yml&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dest</span>: <span style="color:#e6db74">&#34;loki-config.yml&#34;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">src</span>: <span style="color:#e6db74">&#34;promtail-config.yml&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dest</span>: <span style="color:#e6db74">&#34;promtail-config.yml&#34;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">src</span>: <span style="color:#e6db74">&#34;grafana.ini&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dest</span>: <span style="color:#e6db74">&#34;grafana.ini&#34;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">src</span>: <span style="color:#e6db74">&#34;nginx&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dest</span>: <span style="color:#e6db74">&#34;.&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Create .env for docker-compose to load</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">copy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">dest</span>: <span style="color:#e6db74">&#34;/home/ubuntu/app/.env&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">content</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      export COMPOSE_FILE=docker-compose.app.yml:docker-compose.monitoring.yml
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      export APP_SERVER_NAME=&#34;{{ APP_SERVER_NAME }}&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">mode</span>: <span style="color:#ae81ff">0644</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Request LetsEncrypt SSL Cert</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">cmd</span>: <span style="color:#e6db74">&#34;init-certbot.sh&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">become</span>: <span style="color:#66d9ef">yes</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">args</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">chdir</span>: <span style="color:#e6db74">&#34;/home/ubuntu/app&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Start Docker Containers</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">command</span>: <span style="color:#ae81ff">docker-compose up -d</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">become</span>: <span style="color:#66d9ef">yes</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">args</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">chdir</span>: <span style="color:#e6db74">&#34;/home/ubuntu/app&#34;</span>
</span></span></code></pre></div><p>The tasks are pretty straight forward, since we already have docker installed on this host in our provisioning phase, we don&rsquo;t need to install it with ansible. We create a folder to contain our files, copy over our files to this directory, pass the necessary environment variables, create SSL certificate for HTTPS and start our services. Easy peasy üòâ.</p>
<p>I have written a <a href="https://github.com/0xdod/cv-challenge02/blob/main/ansible/roles/web_servers/files/init-certbot.sh">script</a> for the SSL certificate creation and also <a href="https://github.com/0xdod/cv-challenge02/tree/main/ansible/roles/web_servers/files/nginx">nginx configuration</a>. At this point, we are close to done. But before we proceed we need to instruct ansible of our roles and where to find them. In the root folder, create an <code>ansible.cfg</code> file with the following content</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cfg" data-lang="cfg"><span style="display:flex;"><span><span style="color:#66d9ef">[defaults]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">host_key_checking</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">False</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">roles_path</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">./ansible/roles</span>
</span></span></code></pre></div><p>This tells ansible about our roles and also for the sake of development, prevent strict host key checking which is a common issue when dealing with euphemeral hosts like cloud VMs.</p>
<p>We can proceed to run the command to provision and configure our resources</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>terraform apply -auto-approve
</span></span></code></pre></div><p>If this runs successfully, you should be able to access your app via the value of the <code>TF_VAR_domain_name</code> variable, this setup ensures that with one command we create an EC2 instance, install docker, copy over necessary configuration files, configure nginx as a reverse proxy, request SSL certificates for HTTPS and start our containers.</p>
<p>You can destroy the resources with also one command which terminates the EC2 instance and stops all services from running.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>terraform destroy -auto-approve
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>We have been able to see how terraform and ansible can work together to automate deployment processes, they can help speed up and streamline the process of deployments in the areas where they shine. Terraform is usually used to provision infrastructure and ansible to configure them. This gives us the ability to deploy infrastructure in an immutable fashion, multiple times a day in a reproducable and deterministic manner, we get to deploy, destroy and repeat!. The full solution to this challenge is contained in my <a href="https://github.com/0xdod/cv-challenge02">repo</a></p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Deploying and Monitoring a Full-Stack App with Modern DevOps Tools.</title>
      <link>http://localhost:1313/posts/compose-your-apps/</link>
      <pubDate>Wed, 27 Nov 2024 01:50:50 +0100</pubDate>
      
      <guid>http://localhost:1313/posts/compose-your-apps/</guid>
      <description><![CDATA[<p>This year I decided to venture into the realm of practical DevOps adventures and I was lucky to stumble upon a set of DevOps challenges spanning 6 weeks, where each week we battle with some unique problem-solving scenarios involving various DevOps tools and technologies. This article is a documentation of my first challenge which is <em>Deploying a containerized application and monitoring stack to the cloud, and configuring a reverse proxy.</em></p>
<p>The goal was to deploy a full-stack application with a React frontend, FastAPI backend and a PostgreSQL database in separate containers with docker-compose, putting all HTTP services behind a reverse proxy and managing configuration for the reverse proxy, collecting logs and container metrics and building a dashboard to visualize them.</p>
<p>To achieve this, I had to learn about:</p>
<ul>
<li>Deploying multi-container applications with <a href="https://docs.docker.com/compose/"><strong>docker-compose</strong></a></li>
<li>Setting up <a href="https://www.adminer.org/">adminer</a> for database management.</li>
<li>Configuring a reverse proxy with <a href="https://nginxproxymanager.com"><strong>Nginx Proxy Manager</strong></a></li>
<li>Collecting metrics with <a href="https://prometheus.io"><strong>prometheus</strong></a> and <a href="https://github.com/google/cadvisor"><strong>cAdvisor</strong></a></li>
<li>Aggregating logs with <a href="https://grafana.com/docs/loki/latest/"><strong>Loki</strong></a> and <a href="https://grafana.com/docs/loki/latest/send-data/promtail/"><strong>Promtail</strong></a></li>
<li>Adding¬†dashboards to <a href="https://grafana.com/grafana/">Grafana</a>.</li>
<li>Deploying to a VM on the cloud with a custom domain.</li>
</ul>
<p>Now let&rsquo;s proceed.</p>
<h2 id="docker-containers">Docker Containers</h2>
<p>It might not be obvious, but to &ldquo;dockerize&rdquo; our application, we need to have <a href="https://docs.docker.com/get-started/get-docker/">docker</a> running and use docker-compose to deploy multiple containers, one for each service. The services to be deployed include:</p>
<ul>
<li>Frontend service</li>
<li>Backend service</li>
<li>Postgres service</li>
<li>Adminer service</li>
<li>Nginx reverse proxy service</li>
<li>Grafana service</li>
<li>Prometheus service</li>
<li>Loki service</li>
<li>Promtail service</li>
<li>cAdvisor service</li>
</ul>
<p>All these services will be deployed on a single VM in the cloud, the services can be categorized into two stacks each with a docker-compose configuration file:</p>
<ul>
<li>An application stack: Frontend, Backend, Postgres, Adminer, Nginx proxy manager</li>
<li>A monitoring stack: Grafana, Prometheus, Loki, Promtail and cAdvisor</li>
</ul>
<p>We begin with the application stack, we first have to build docker images for our backend and frontend services and we do that by creating two <code>Dockerfile</code>s in our project&rsquo;s root directory. The link to the project repo can be found <a href="https://github.com/The-DevOps-Dojo/cv-challenge01">here</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone https://github.com/The-DevOps-Dojo/cv-challenge01.git
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cd cv-challenge01
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>touch Dockerfile.backend Dockerfile.frontend
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="display:flex;"><span><span style="color:#75715e"># Dockerfile.backend</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> python:3.10-slim</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /opt/dojo</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apt-get update <span style="color:#f92672">&amp;&amp;</span> apt-get install -y curl<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> curl -sSL https://install.python-poetry.org | POETRY_HOME<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/opt/poetry&#34;</span> POETRY_VERSION<span style="color:#f92672">=</span>1.8.3 python3 -<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> PATH<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/opt/poetry/bin:</span><span style="color:#e6db74">${</span>PATH<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> backend/pyproject.toml backend/poetry.lock .<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> poetry install<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> PYTHONPATH<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/opt/dojo&#34;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> backend/ .<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> curl -o wait-for-it.sh https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> chmod +x wait-for-it.sh<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">EXPOSE</span><span style="color:#e6db74"> 8000</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> [<span style="color:#e6db74">&#34;sh&#34;</span>, <span style="color:#e6db74">&#34;-c&#34;</span>, <span style="color:#e6db74">&#34;./wait-for-it.sh -s postgres:5432 -- poetry run bash ./prestart.sh &amp;&amp; poetry run uvicorn --host 0.0.0.0 --port 8000 app.main:app --reload&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="display:flex;"><span><span style="color:#75715e"># Dockerfile.frontend</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> node:18 AS build</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /opt/app</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> frontend/package.json frontend/package-lock.json ./<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> npm install<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> frontend/ .<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> VITE_API_URL<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://&lt;localhost or VM server hostname/ip&gt;&#34;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> npm run build<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> nginx:stable-alpine AS production</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>build /opt/app/dist /usr/share/nginx/html<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">EXPOSE</span><span style="color:#e6db74"> 80</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> [<span style="color:#e6db74">&#34;nginx&#34;</span>, <span style="color:#e6db74">&#34;-g&#34;</span>, <span style="color:#e6db74">&#34;daemon off;&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>Now that we have our Dockerfiles ready, we need to create our docker-compose configuration file for the application stack.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>touch docker-compose.app.yml
</span></span></code></pre></div><p>and the content includes the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">frontend</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">context</span>: <span style="color:#ae81ff">.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dockerfile</span>: <span style="color:#ae81ff">Dockerfile.frontend</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">app_network</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">postgres</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">postgres:16</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">POSTGRES_DB=challenge01</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">POSTGRES_PASSWORD=Pssw0rd</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">postgres:/var/lib/postgresql/data</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;5432:5432&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">app_network</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">backend</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">context</span>: <span style="color:#ae81ff">.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dockerfile</span>: <span style="color:#ae81ff">Dockerfile.backend</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">app_network</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">postgres</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">adminer</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">adminer</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">always</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">app_network</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">proxy-manager</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#e6db74">&#34;jc21/nginx-proxy-manager:latest&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;80:80&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;443:443&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;81:81&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./data:/data</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./letsencrypt:/etc/letsencrypt</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">app_network</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">app_network</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">driver</span>: <span style="color:#ae81ff">bridge</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">postgres</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">driver</span>: <span style="color:#ae81ff">local</span>
</span></span></code></pre></div><p>Modify the <code>backend/.env</code> file to include our database credentials, we are hardcoding these in the docker-compose file for convenience, in a production environment, this is bad practice as secrets as this should not be exposed publicly.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>POSTGRES_SERVER<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;postgres&#34;</span>
</span></span><span style="display:flex;"><span>POSTGRES_PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">5432</span>
</span></span><span style="display:flex;"><span>POSTGRES_DB<span style="color:#f92672">=</span>challenge01
</span></span><span style="display:flex;"><span>POSTGRES_USER<span style="color:#f92672">=</span>postgres
</span></span><span style="display:flex;"><span>POSTGRES_PASSWORD<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Pssw0rd&#34;</span>
</span></span></code></pre></div><p>With the enviroment variables set, we can run our docker-compose command to build and run our code. But remember we created a <code>docker-compose.app.yml</code> file and we will be creating another config file for the monitoring stack but the docker-compose tool uses a <code>docker-compose.yml</code> file as default which can be overriden by passing the <code>-f</code> flag to the command. So we have the option to pass this file explicitly with the <code>-f</code> flag or we can set an appropriate variable to tell docker-compose where to find the config files. We would be taking the latter approach.</p>
<p>Create a <code>.env</code> file in the project&rsquo;s root directory and set the contents to the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>COMPOSE_FILE<span style="color:#f92672">=</span>docker-compose.app.yml
</span></span></code></pre></div><p>This tells docker-compose where to find the configuration files. With this setup, we can run our docker-compose command</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker-compose up -d --build
</span></span></code></pre></div><p>This would build and start the services we have defined so far, all our services should be up, but how do we access them?</p>
<h2 id="reverse-proxy-setup">Reverse Proxy Setup</h2>
<p>A <strong>reverse proxy</strong> is a server that sits between client devices and backend servers, forwarding client requests to the appropriate server and then returning the server&rsquo;s response back to the client. It acts as an intermediary, managing traffic and providing various benefits like security, scalability, and load balancing. In this challenge, we will be using Nginx and nginx proxy manager to manage traffic to our containers.</p>
<p>If you inspect our <code>docker-compose.app.yml</code> file, you would notice only our proxy-manager service has the host-container ports mapped, <code>80</code> for HTTP, <code>443</code> for HTTPS and <code>81</code> is an admin interface for nginx proxy manager, this is the only http service we are exposing to the internet, traffic would be routed internally through our reverse proxy.</p>
<p>Navigate to <code>http://localhost:81</code> (or your server&rsquo;s IP/DNS hostname on port 81) and you should see the admin login interface.</p>
<p><img src="images/nginx-proxy-manager-login.png" alt="nginx proxy manager login" title="Nginx Proxy Manager"></p>
<p>After logging in for the first time you are asked to input a new password and email, then you should be able to set proxy rules to route traffic from our proxy-manager container to other containers since they are in the same network according to our config file.</p>
<p><img src="images/nginx-proxy-manager-logged-in.png" alt="nginx proxy manager home" title="Nginx Proxy Manager"></p>
<p>Click on &ldquo;Proxy Hosts&rdquo; to begin configuring proxy setting for your services.</p>
<p><img src="images/nginx-proxy-manager-proxy-hosts.png" alt="nginx proxy manager proxy host" title="Nginx Proxy Manager"></p>
<p>To add a proxy host configuration, click on the &ldquo;Add Proxy Host&rdquo; button and it should bring up</p>
<p><img src="images/add-proxy-host.png" alt="nginx proxy manager add proxy host" title="Nginx Proxy Manager"></p>
<p>Put your server domain name in the &ldquo;Domain Names&rdquo; input, and put the value <code>proxy-manager</code> as defined in our compose config as the Forward destination on port 80, so every request is forwarded to port 80, then navigate to the &ldquo;Custom Locations&rdquo; tab to set routing rules.</p>
<p><img src="images/custom-location.png" alt="nginx proxy manager add proxy host" title="Nginx Proxy Manager"></p>
<p>For each entry in the table below, click on &ldquo;Add Location&rdquo; to define the following routing rules.</p>
<table>
  <thead>
      <tr>
          <th>Location</th>
          <th>Forward Hostname/IP</th>
          <th>Port</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>/</td>
          <td>frontend</td>
          <td>80</td>
      </tr>
      <tr>
          <td>/api</td>
          <td>backend</td>
          <td>8000</td>
      </tr>
      <tr>
          <td>/docs</td>
          <td>backend/api/v1/openapi.json</td>
          <td>8000</td>
      </tr>
      <tr>
          <td>/prometheus</td>
          <td>prometheus</td>
          <td>9090</td>
      </tr>
      <tr>
          <td>/grafana</td>
          <td>grafana</td>
          <td>3000</td>
      </tr>
      <tr>
          <td>/loki</td>
          <td>loki</td>
          <td>3100</td>
      </tr>
      <tr>
          <td>/promtail</td>
          <td>promtail</td>
          <td>9080</td>
      </tr>
      <tr>
          <td>/cadvisor</td>
          <td>cadvisor</td>
          <td>8080</td>
      </tr>
  </tbody>
</table>
<p>We would come back to the rest of the services, let us focus on the application stack, if everything goes well, you should be able to visit your server&rsquo;s IP/hostname and see the frontend application, log in with the credentials in the <code>backend/.env</code> file and voila! you are a seasoned DevOps engineer.</p>
<p>Some routes may need further configuration especially with handling redirection, so you may need to add some custom Nginx configuration by clicking on the setting icon for the specific location and adding the following</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nginx" data-lang="nginx"><span style="display:flex;"><span><span style="color:#66d9ef">location</span> <span style="color:#e6db74">/&lt;location&gt;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rewrite</span> <span style="color:#e6db74">^/&lt;location&gt;/(.*)</span>$ <span style="color:#e6db74">/</span>$1 <span style="color:#e6db74">break</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">proxy_pass</span> <span style="color:#e6db74">&lt;container-name&gt;:&lt;container-port&gt;/</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">proxy_redirect</span> <span style="color:#e6db74">/</span> <span style="color:#e6db74">/&lt;location&gt;/</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Replace location with the appropriate location you are defining and the corresponding container-name and container-port.
e.g</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nginx" data-lang="nginx"><span style="display:flex;"><span><span style="color:#66d9ef">location</span> <span style="color:#e6db74">/prometheus</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rewrite</span> <span style="color:#e6db74">^/prometheus/(.*)</span>$ <span style="color:#e6db74">/</span>$1 <span style="color:#e6db74">break</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">proxy_pass</span> <span style="color:#e6db74">http://cv-challenge01-prometheus-1:9090/</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">proxy_redirect</span> <span style="color:#e6db74">/</span> <span style="color:#e6db74">/prometheus/</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This helps fix some common redirection issues, particularly for services like prometheus, and grafana.</p>
<p>Finally create another proxy host, this time for the <code>adminer</code> service, similar to how we routed all requests from our domain through our proxy-manager container, we would route a subdomain <code>db.&lt;domain&gt;</code> to the adminer container.</p>
<h2 id="monitoring-and-logging">Monitoring and Logging</h2>
<p>To setup our monitoring stack, we create a <code>docker-compose.monitoring.yml</code> file to define our services</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>touch docker-compose.monitoring.yml
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">prometheus</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">prom/prometheus:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">always</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./prometheus.yml:/etc/prometheus/prometheus.yml:ro</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">command</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;--config.file=/etc/prometheus/prometheus.yml&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">app_network</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">grafana</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">grafana/grafana:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">always</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">grafana-storage:/var/lib/grafana</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./grafana.ini:/etc/grafana/grafana.ini:ro</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">app_network</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">loki</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">grafana/loki:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">command</span>: -<span style="color:#ae81ff">config.file=/etc/loki/config.yml</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./loki-config.yml:/etc/loki/config.yml</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">app_network</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">promtail</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">grafana/promtail:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/var/log:/var/log</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/var/lib/docker/containers:/var/lib/docker/containers:ro</span> <span style="color:#75715e"># FOR WSL2 docker volume see more (https://github.com/vacp2p/wakurtosis/issues/58)</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./promtail-config.yml:/etc/promtail/config.yml</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">command</span>: <span style="color:#e6db74">&#34;-config.file=/etc/promtail/config.yml&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">app_network</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">cadvisor</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">gcr.io/cadvisor/cadvisor:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/:/rootfs:ro</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/var/run:/var/run:rw</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/sys:/sys:ro</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/var/lib/docker/:/var/lib/docker:ro</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/dev/disk:/dev/disk:ro</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">networks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">app_network</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">grafana-storage</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">driver</span>: <span style="color:#ae81ff">local</span>
</span></span></code></pre></div><p>We also need to setup configuration files for prometheus, grafana, loki and promtail. So create the following files</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>touch prometheus.yml grafana.ini loki-config.yml promtail-config.yml
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#75715e"># prometheus.yml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">global</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">scrape_interval</span>: <span style="color:#ae81ff">15s</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">evaluation_interval</span>: <span style="color:#ae81ff">15s</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">scrape_configs</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">job_name</span>: <span style="color:#e6db74">&#34;prometheus&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">static_configs</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">targets</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#e6db74">&#34;localhost:9090&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">job_name</span>: <span style="color:#e6db74">&#34;loki&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">static_configs</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">targets</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#e6db74">&#34;loki:3100&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">job_name</span>: <span style="color:#e6db74">&#34;promtail&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">static_configs</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">targets</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#e6db74">&#34;promtail:9080&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">job_name</span>: <span style="color:#ae81ff">cadvisor</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">scrape_interval</span>: <span style="color:#ae81ff">5s</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">static_configs</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">targets</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#e6db74">&#34;cadvisor:8080&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#75715e"># grafana.ini</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">[server]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># URL to serve Grafana from, it is important that this matches the URL used by the client.</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">root_url</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">%(protocol)s://%(domain)s:%(http_port)s/grafana/</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#75715e"># loki-config.yml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">auth_enabled</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">server</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">http_listen_port</span>: <span style="color:#ae81ff">3100</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">grpc_listen_port</span>: <span style="color:#ae81ff">9096</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">common</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">instance_addr</span>: <span style="color:#ae81ff">127.0.0.1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">path_prefix</span>: <span style="color:#ae81ff">/tmp/loki</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">storage</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">filesystem</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">chunks_directory</span>: <span style="color:#ae81ff">/tmp/loki/chunks</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">rules_directory</span>: <span style="color:#ae81ff">/tmp/loki/rules</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">replication_factor</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ring</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kvstore</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">store</span>: <span style="color:#ae81ff">inmemory</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">query_range</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">results_cache</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">cache</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">embedded_cache</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">max_size_mb</span>: <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">schema_config</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">configs</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">from</span>: <span style="color:#e6db74">2020-10-24</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">store</span>: <span style="color:#ae81ff">tsdb</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">object_store</span>: <span style="color:#ae81ff">filesystem</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">schema</span>: <span style="color:#ae81ff">v13</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">index</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">prefix</span>: <span style="color:#ae81ff">index_</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">period</span>: <span style="color:#ae81ff">24h</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">ruler</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">alertmanager_url</span>: <span style="color:#ae81ff">http://localhost:9093</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># By default, Loki will send anonymous, but uniquely-identifiable usage and configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># analytics to Grafana Labs. These statistics are sent to https://stats.grafana.org/</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Statistics help us better understand how Loki is used, and they show us performance</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># levels for most users. This helps us prioritize features and documentation.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># For more information on what&#39;s sent, look at</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># https://github.com/grafana/loki/blob/main/pkg/analytics/stats.go</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Refer to the buildReport method to see what goes into a report.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># If you would like to disable reporting, uncomment the following lines:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#analytics:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#  reporting_enabled: false</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">pattern_ingester</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">limits_config</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">allow_structured_metadata</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">volume_enabled</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#75715e"># promtail-config.yml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">server</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">http_listen_port</span>: <span style="color:#ae81ff">9080</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">grpc_listen_port</span>: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">positions</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">filename</span>: <span style="color:#ae81ff">/tmp/positions.yaml</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">clients</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">url</span>: <span style="color:#ae81ff">http://loki:3100/loki/api/v1/push</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">scrape_configs</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">job_name</span>: <span style="color:#ae81ff">system</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">static_configs</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">targets</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">localhost</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">job</span>: <span style="color:#ae81ff">varlogs</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">__path__</span>: <span style="color:#ae81ff">/var/log/*log</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">job_name</span>: <span style="color:#ae81ff">containers</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">static_configs</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">targets</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">localhost</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">job</span>: <span style="color:#e6db74">&#34;containerlogs&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">__path__</span>: <span style="color:#ae81ff">/var/lib/docker/containers/*/*.log</span>
</span></span></code></pre></div><p>Edit the .env file in the root folder like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>COMPOSE_FILE<span style="color:#f92672">=</span>docker-compose.app.yml:docker-compose.monitoring.yml
</span></span></code></pre></div><p>Now we are telling docker-compose to use these two config files to run our containers. We can now run our containers with the command</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker-compose up -d
</span></span></code></pre></div><p>These should start all our services. If all goes well, you should be able to access the routes defined earlier in the reverse proxy. If any issues confirm the services are up or play around with the proxy manager custom location settings</p>
<p>Navigate to the <code>/grafana</code> route and login with the credentials <code>admin</code> for both username and password, you will be prompted to change this after logging in.</p>
<p>Open the menu and navigate to &ldquo;Connections&rdquo; and select &ldquo;Data Sources&rdquo;, add loki and prometheus as data sources,
once configured with the appropriate URLs, we can proceed to create a dashboard.</p>
<p>To save time, we can import community made <a href="https://grafana.com/grafana/dashboards/">dashboards</a> like this <a href="https://grafana.com/grafana/dashboards/21361-docker-cadvisor-compute-resources/">one</a> or you can create your own dashboards</p>
<p><img src="images/grafana-dashboard-cadvisor.png" alt="prometheus cadvisor metrics" title="Grafana Dashboard"></p>
<p>The dashboard above uses metrics from prometheus exported by cAdvisor to give insights on container resource usage. Similarly you can set up dashboards with your Loki source to stream and visualize log data.</p>
<p><img src="images/loki-dashboard.png" alt="loki log aggregation" title="Loki Logs Dashboard"></p>
<p>That&rsquo;s about it for our monitoring stack, right now we have been able to setup our application and monitoring stacks, but we need to deploy this to a VM so it is publicly available.</p>
<h2 id="cloud-deployment">Cloud Deployment</h2>
<p>To make our application available to the public, we need a domain name, you can get a free subdomain with <a href="https://freedns.afraid.org/subdomain/">Afraid DNS</a>, we also need our target VM with a public IP address, we can setup an <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html">EC2 server on AWS</a> with docker installed, you can put the script to install docker and add your user to a group in the User Data section before launching the instance, so it runs while the server is being provisioned. Also ensure the following ports are open in the security groups or firewall. Ports 22, 80, 81, 443</p>
<p>Once that is out of the way and we have our IP address, we should point our domain name to this IP address, then we can go ahead to copy our development files over to our VM using <code>scp</code>. In our project&rsquo;s root folder, copy everything to our VM like so</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>scp -ri <span style="color:#e6db74">&#34;key.pem&#34;</span> . user@hostname:/home/ubuntu
</span></span></code></pre></div><p>Ensure our docker-compose files were copied over and .env file, then run the docker-compose up command</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker-compose up -d --build
</span></span></code></pre></div><p>Make sure to set the reverse proxy configuration if you did it on localhost initially, then add SSL to your domain by either getting a free certificate from Let&rsquo;s Encrypt right there in the Nginx Proxy Manager admin interface or add a custom one. Once SSL is set up and routing is working fine, we are done!. üéäüéäüéä</p>
<p>To avoid CORS errors when accessing the frontend, update the <code>backend/.env</code> to include your domain name in the <code>BACKEND_CORS_ORIGINS</code> variable.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>We have been able to deploy a fullstack application and monitoring tools for our deployment with the help of docker-compose. docker-compose is a simple tool and I am aware that when running production grade apps, there are other preferred industry-standard alternatives like kubernetes, but we have been able to get a taste of what is required to take an app from code to deployment. You can find my repo with full solution <a href="https://github.com/0xdod/cv-challenge01">here</a></p>
<p>We have learned to use tools like grafana, loki, promtail, prometheus and cadvisor to make our systems observable which is standard industry practice, also learned about reverse proxys and how to manage proxy configurations with a simple tool like nginx proxy manager.</p>
<p>By combining these tools, we‚Äôve built a solid infrastructure that ensures real-time monitoring of our application&rsquo;s health and performance. This framework enables us to promptly detect and address issues, establishing a reliable base for maintaining and scaling the workloads effectively.</p>
]]></description>
      
    </item>
    
    
  </channel>
</rss>
